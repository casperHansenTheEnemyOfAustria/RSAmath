require 'prime'

def find_d(m,e)
    i = 1.0
    # checks if m i times plus 1 is divisible by
    # e by checking if the answer has no decimals
    while ((m*i)+1)/e != (((m*i)+1)/e).to_i
        i +=1
    end
    # p "i is #{i}"
    # returns the division
    d = ((m*i)+1)/e
    return d
end


many_numbers = [995641,995651,995663,995669,995677,995699,995713,995719,995737,995747,
995783,995791,995801,995833,995881,995887,995903,995909,995927,995941,
995957,995959,995983,995987,995989,996001,996011,996019,996049,996067,
996103,996109,996119,996143,996157,996161,996167,996169,996173,996187,
996197,996209,996211,996253,996257,996263,996271,996293,996301,996311,
996323,996329,996361,996367,996403,996407,996409,996431,996461,996487,
996511,996529,996539,996551,996563,996571,996599,996601,996617,996629,
996631,996637,996647,996649,996689,996703,996739,996763,996781,996803,
996811,996841,996847,996857,996859,996871,996881,996883,996887,996899,
996953,996967,996973,996979,997001,997013,997019,997021,997037,997043,
997057,997069,997081,997091,997097,997099,997103,997109,997111,997121,
997123,997141,997147,997151,997153,997163,997201,997207,997219,997247,
997259,997267,997273,997279,997307,997309,997319,997327,997333,997343,
997357,997369,997379,997391,997427,997433,997439,997453,997463,997511,
997541,997547,997553,997573,997583,997589,997597,997609,997627,997637,
997649,997651,997663,997681,997693,997699,997727,997739,997741,997751,
997769,997783,997793,997807,997811,997813,997877,997879,997889,997891,
997897,997933,997949,997961,997963,997973,997991,998009,998017,998027,
998029,998069,998071,998077,998083,998111,998117,998147,998161,998167,
998197,998201,998213,998219,998237,998243,998273,998281,998287,998311,
998329,998353,998377,998381,998399,998411,998419,998423,998429,998443,
998471,998497,998513,998527,998537,998539,998551,998561,998617,998623,
998629,998633,998651,998653,998681,998687,998689,998717,998737,998743,
998749,998759,998779,998813,998819,998831,998839,998843,998857,998861,
998897,998909,998917,998927,998941,998947,998951,998957,998969,998983,
998989,999007,999023,999029,999043,999049,999067,999083,999091,999101,
999133,999149,999169,999181,999199,999217,999221,999233,999239,999269,
999287,999307,999329,999331,999359,999371,999377,999389,999431,999433,
999437,999451,999491,999499,999521,999529,999541,999553,999563,999599,
999611,999613,999623,999631,999653,999667,999671,999683,999721,999727,
999749,999763,999769,999773,999809,999853,999863,999883,999907,999917,
999931,999953,999959,999961,999979,999983]
# many_numbers = Prime.first 2**15



# p = many_numbers[rand(0..(many_numbers.length - 1))]
# q =  many_numbers[rand(0..(many_numbers.length - 1))]

p = 2147483647
q = 2147483647


# does nessicairy operations
n = p*q
m = ((p-1)*(q-1)).to_f
e = 1.0


# checks if m is not divisible by m to generate a suitable e
while m/e == (m/e).to_i
    e += 1.0
end

d = find_d(m,e).to_i


p "n is #{n}"
p "e is #{e}"
# p "m is #{m}"
# p "d is #{d}"
# makes them all integers swag
d = d.to_i
e = e.to_i
m = m.to_i
n = n.to_i
p "no its integer time"
p "n is #{n}"
p "e is #{e}"
# p "m is #{m}"
# p "d is #{d}"


# client side
p "give me your message "
message = gets.chomp.to_i
while message > n
    p " fuck you"
    message = gets.chomp.to_i
end
    # p "#{message}^#{e} mod #{n} is"
    # hello my name is jhon doe
    
    

    # p "#{message}^#{d} is #{message**d}"

    actual_message = message.pow(d,n)
    p "the message was" + " #{actual_message} but dont show this to the hacker man or he will steal all ur furry porn"